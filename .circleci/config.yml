version: 2.0
jobs:
  "python1":
    docker:
      - image: circleci/python:3.6.1
        environment: # environment variables for database
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout # special step to check out source code to the working directory
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # install and activate virtual environment with pip
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - store_artifacts: # special step to store test reports as artifacts
          path: test-reports/
          destination: tr1
      - deploy:
          name: Push application Docker image
          command: |
              sh ./deploy.sh prod

  "python2":
    docker:
      - image: circleci/python:2-jessie
        environment: # environment variables for database
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout # special step to check out source code to the working directory
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: # install and activate virtual environment with pip
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run: # run tests
          command: |
            . venv/bin/activate
            python manage.py test
      - store_artifacts: # special step to store test reports as artifacts
          path: test-reports/
          destination: tr1
      - deploy:
          name: Push application Docker image
          command: |
            login="$(aws ecr get-login --region ap-southeast-1)"
            ${login}
            docker tag app 012881927014.dkr.ecr.ap-southeast-1.amazonaws.com/docker:stg          
            docker push 012881927014.dkr.ecr.ap-southeast-1.amazonaws.com/docker:stg

  "ubuntu3":
    docker:
            - image: docker:17.05.0-ce-git 
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            login="$(aws ecr get-login --region ap-southeast-1)"
            ${login}
            docker tag app 012881927014.dkr.ecr.ap-southeast-1.amazonaws.com/docker:dev          
            docker push 012881927014.dkr.ecr.ap-southeast-1.amazonaws.com/docker:dev
            
  "ubuntu4":
    docker:
      - image: docker:17.05.0-ce-git 
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            login="$(aws ecr get-login --region ap-southeast-1)"
            ${login}
            docker tag app 012881927014.dkr.ecr.ap-southeast-1.amazonaws.com/docker:test          
            docker push 012881927014.dkr.ecr.ap-southeast-1.amazonaws.com/docker:test
    
workflows:
  version: 2
  prod_staging:
    jobs:
      - "python1":
          filters:
            branches:
              ignore: production
      - "python2":
          filters:
            branches:
              ignore: staging
